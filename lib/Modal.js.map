{"version":3,"file":"Modal.js","sources":["../src/ui/Modal.js"],"sourcesContent":["import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport const ModalContainerSelector = '.c-modal__container';\n\nclass Modal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.backdrop = null;\n  }\n\n  componentDidMount() {\n    const { isOpen, allowScrolling } = this.props;\n\n    if (isOpen && !allowScrolling) {\n      this.hideBodyOverflow();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isOpen, allowScrolling } = this.props;\n    if (allowScrolling) return;\n\n    if (!prevProps.isOpen && isOpen) {\n      this.hideBodyOverflow();\n    } else if (prevProps.isOpen && !isOpen) {\n      this.unsetBodyOverflow();\n    }\n  }\n\n  componentWillUnmount() {\n    const { isOpen } = this.props;\n\n    if (isOpen) {\n      this.unsetBodyOverflow();\n    }\n  }\n\n  handleOnClickModal = e => {\n    e.stopPropagation();\n  };\n\n  render() {\n    const {\n      isOpen,\n      children,\n      positionClassName,\n      containerClassName,\n      contentClassName,\n      backgroundClassName,\n      styleClass,\n      position,\n    } = this.props;\n\n    return (\n      isOpen && (\n        <div className=\"c-modal__viewport\">\n          <div\n            className={classNames(['c-modal__backdrop', backgroundClassName])}\n            onClick={this.close}\n            ref={ref => {\n              this.backdrop = ref;\n            }}\n          >\n            <div\n              className={classNames(\n                'c-modal__container',\n                {\n                  'c-modal__container-left': position.includes('left'),\n                  'c-modal__container-right': position.includes('right'),\n                  'c-modal__container-top': position.includes('top'),\n                  'c-modal__container-bottom': position.includes('bottom'),\n                  'c-modal__container-absolute': position === 'absolute',\n                },\n                positionClassName,\n                containerClassName,\n              )}\n            >\n              <div\n                className={classNames(\n                  'c-modal',\n                  'bg-white',\n                  'border',\n                  'border-gray',\n                  {\n                    'c-modal-width': !position || position === 'center',\n                  },\n                  styleClass,\n                  contentClassName,\n                )}\n                onClick={this.handleOnClickModal}\n              >\n                {children}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    );\n  }\n\n  close = e => {\n    const { onClose } = this.props;\n    e.preventDefault();\n\n    if (onClose) {\n      onClose();\n    }\n  };\n\n  scrollToTop() {\n    this.backdrop.scrollTop = 0;\n  }\n\n  hideBodyOverflow() {\n    document.body.style.overflow = 'hidden';\n  }\n\n  unsetBodyOverflow() {\n    document.body.style.overflow = 'visible';\n  }\n}\n\nModal.displayName = 'Modal';\n\nModal.defaultProps = {\n  isOpen: false,\n  positionClassName: null,\n  containerClassName: '',\n  children: null,\n  onClose: () => {},\n  styleClass: '',\n  contentClassName: '',\n  allowScrolling: false,\n  position: 'center',\n  backgroundClassName: 'bg-white-muted',\n};\n\nModal.propTypes = {\n  /** Modal is shown or not */\n  isOpen: PropTypes.bool,\n  /** CSS class to determine modal positioning */\n  positionClassName: PropTypes.string,\n  /** Modal content */\n  children: PropTypes.node,\n  /** handler when modal closes */\n  onClose: PropTypes.func,\n  /** CSS class for modal styles */\n  styleClass: PropTypes.string,\n  /** Allows scrolling on main container body when modal is open */\n  allowScrolling: PropTypes.bool,\n  /** Modal position, center, left-bottom, right-bottom, left-top, right-top */\n  position: PropTypes.string,\n  /** Modal container CSS classes  */\n  containerClassName: PropTypes.string,\n  /** Modal container CSS classes  */\n  contentClassName: PropTypes.string,\n  /** Modal background CSS classes, default bg-white-muted */\n  backgroundClassName: PropTypes.string,\n};\n\nexport default Modal;\n"],"names":["ModalContainerSelector","Modal","props","handleOnClickModal","stopPropagation","close","onClose","_this","preventDefault","backdrop","Component","this","isOpen","allowScrolling","hideBodyOverflow","prevProps","unsetBodyOverflow","children","positionClassName","containerClassName","contentClassName","backgroundClassName","styleClass","position","React","className","classNames","ref","includes","scrollTop","body","style","overflow","displayName","defaultProps","propTypes","PropTypes","bool","string","node","func"],"mappings":"u9BAIaA,uBAAyB,sBAEhCC,6BACQC,iHACJA,aAgCRC,mBAAqB,cACjBC,qBA8DJC,MAAQ,gBACEC,EAAYC,EAAKL,MAAjBI,UACNE,iBAEEF,UAjGCG,SAAW,yBAJAC,0EAQmBC,KAAKT,MAAhCU,IAAAA,OAAQC,IAAAA,eAEZD,IAAWC,QACRC,8DAIUC,SACkBJ,KAAKT,MAAhCU,IAAAA,SAAQC,kBAGXE,EAAUH,QAAUA,OAClBE,mBACIC,EAAUH,SAAWA,QACzBI,oEAKYL,KAAKT,MAAhBU,aAGDI,kEAkBHL,KAAKT,MARPU,IAAAA,OACAK,IAAAA,SACAC,IAAAA,kBACAC,IAAAA,mBACAC,IAAAA,iBACAC,IAAAA,oBACAC,IAAAA,WACAC,IAAAA,gBAIAX,GACEY,2BAAKC,UAAU,0DAEAC,YAAY,oBAAqBL,YACnCV,KAAKN,UACT,cACEI,SAAWkB,yCAILD,WACT,gDAE6BH,EAASK,SAAS,mCACjBL,EAASK,SAAS,kCACpBL,EAASK,SAAS,mCACfL,EAASK,SAAS,wCACH,aAAbL,GAEjCL,EACAC,yCAIWO,WACT,UACA,WACA,SACA,gCAEoBH,GAAyB,WAAbA,GAEhCD,EACAF,WAEOT,KAAKR,qEAqBrBM,SAASoB,UAAY,sDAIjBC,KAAKC,MAAMC,SAAW,8DAItBF,KAAKC,MAAMC,SAAW,mBAInC/B,MAAMgC,YAAc,QAEpBhC,MAAMiC,sBACI,oBACW,wBACC,YACV,aACD,wBACG,oBACM,mBACF,WACN,6BACW,kBAGvBjC,MAAMkC,kBAEIC,UAAUC,uBAECD,UAAUE,gBAEnBF,UAAUG,aAEXH,UAAUI,gBAEPJ,UAAUE,sBAENF,UAAUC,cAEhBD,UAAUE,0BAEAF,UAAUE,wBAEZF,UAAUE,2BAEPF,UAAUE"}